//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFDemo
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/Tungnt.NET.WCFWinForm")]
    public partial class Student : object
    {
        
        private string ClassField;
        
        private string ProfessionalField;
        
        private int StudentIDField;
        
        private string StudentNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class
        {
            get
            {
                return this.ClassField;
            }
            set
            {
                this.ClassField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Professional
        {
            get
            {
                return this.ProfessionalField;
            }
            set
            {
                this.ProfessionalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StudentID
        {
            get
            {
                return this.StudentIDField;
            }
            set
            {
                this.StudentIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentName
        {
            get
            {
                return this.StudentNameField;
            }
            set
            {
                this.StudentNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFDemo.IWCFServiceDemo")]
    public interface IWCFServiceDemo
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceDemo/GetStudents", ReplyAction="http://tempuri.org/IWCFServiceDemo/GetStudentsResponse")]
        System.Threading.Tasks.Task<WCFDemo.Student[]> GetStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceDemo/AddStudent", ReplyAction="http://tempuri.org/IWCFServiceDemo/AddStudentResponse")]
        System.Threading.Tasks.Task<bool> AddStudentAsync(WCFDemo.Student newStudent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceDemo/UpdateStudent", ReplyAction="http://tempuri.org/IWCFServiceDemo/UpdateStudentResponse")]
        System.Threading.Tasks.Task<bool> UpdateStudentAsync(WCFDemo.Student updateStudent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceDemo/DeleteStudent", ReplyAction="http://tempuri.org/IWCFServiceDemo/DeleteStudentResponse")]
        System.Threading.Tasks.Task<bool> DeleteStudentAsync(int studentID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IWCFServiceDemoChannel : WCFDemo.IWCFServiceDemo, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class WCFServiceDemoClient : System.ServiceModel.ClientBase<WCFDemo.IWCFServiceDemo>, WCFDemo.IWCFServiceDemo
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WCFServiceDemoClient() : 
                base(WCFServiceDemoClient.GetDefaultBinding(), WCFServiceDemoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWCFServiceDemo.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFServiceDemoClient(EndpointConfiguration endpointConfiguration) : 
                base(WCFServiceDemoClient.GetBindingForEndpoint(endpointConfiguration), WCFServiceDemoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFServiceDemoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WCFServiceDemoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFServiceDemoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WCFServiceDemoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WCFServiceDemoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<WCFDemo.Student[]> GetStudentsAsync()
        {
            return base.Channel.GetStudentsAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddStudentAsync(WCFDemo.Student newStudent)
        {
            return base.Channel.AddStudentAsync(newStudent);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStudentAsync(WCFDemo.Student updateStudent)
        {
            return base.Channel.UpdateStudentAsync(updateStudent);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStudentAsync(int studentID)
        {
            return base.Channel.DeleteStudentAsync(studentID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWCFServiceDemo))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWCFServiceDemo))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:57302/WCFServiceDemo.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WCFServiceDemoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWCFServiceDemo);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WCFServiceDemoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWCFServiceDemo);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWCFServiceDemo,
        }
    }
}
